// <auto-generated />
using System;
using FloatingNotes.API.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FloatingNotes.API.DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250611203411_connectedNote")]
    partial class connectedNote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FloatingNotes.API.Domain.Entities.ConnectionFloatingNote", b =>
                {
                    b.Property<Guid>("MasterFloatingNoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("master_floating_note_id");

                    b.Property<Guid>("ConnectedFloatingNoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("connected_floating_note_id");

                    b.HasKey("MasterFloatingNoteId", "ConnectedFloatingNoteId");

                    b.HasIndex("ConnectedFloatingNoteId");

                    b.ToTable("connected_floating_notes", (string)null);
                });

            modelBuilder.Entity("FloatingNotes.API.Domain.Entities.FloatingNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_floating_note_id");

                    b.Property<string>("AIContent")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("ai_content");

                    b.Property<string>("AITitle")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("ai_title");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsIncludedInResponseProcessing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_included_in_response_processing");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("number");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("floating_notes", (string)null);
                });

            modelBuilder.Entity("FloatingNotes.API.Domain.Entities.ConnectionFloatingNote", b =>
                {
                    b.HasOne("FloatingNotes.API.Domain.Entities.FloatingNote", "ConnectedFloatingNote")
                        .WithMany()
                        .HasForeignKey("ConnectedFloatingNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloatingNotes.API.Domain.Entities.FloatingNote", "MasterFloatingNote")
                        .WithMany("ConnectedFloatingNotes")
                        .HasForeignKey("MasterFloatingNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedFloatingNote");

                    b.Navigation("MasterFloatingNote");
                });

            modelBuilder.Entity("FloatingNotes.API.Domain.Entities.FloatingNote", b =>
                {
                    b.Navigation("ConnectedFloatingNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
